// Generated by CoffeeScript 1.7.1
(function() {
  var authorize, callbacks, parse, serialize, vkRegex;

  vkRegex = /^https?:\/\/.*vk\.com/;

  serialize = function(object) {
    var key, pairs, value;
    pairs = (function() {
      var _results;
      _results = [];
      for (key in object) {
        value = object[key];
        _results.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)));
      }
      return _results;
    })();
    return pairs.join('&');
  };

  parse = function(url) {
    var keyValue, pair, params, parsArray, _i, _len;
    params = {};
    parsArray = url.split('#')[1].split('&');
    for (_i = 0, _len = parsArray.length; _i < _len; _i++) {
      pair = parsArray[_i];
      keyValue = pair.split('=');
      params[keyValue[0]] = [keyValue[1]];
    }
    return params;
  };

  callbacks = [];

  authorize = (function() {
    var inProgress, params, popup, screenHeight, screenWidth;
    inProgress = false;
    params = {
      client_id: 4324791,
      scope: 'messages,offline',
      redirect_uri: 'https://oauth.vk.com/blank.html',
      display: 'popup',
      v: 5.24,
      response_type: 'token'
    };
    screenWidth = window.screen.width;
    screenHeight = window.screen.height;
    popup = {
      url: "https://oauth.vk.com/authorize?" + (serialize(params)),
      type: 'popup',
      left: screenWidth / 4,
      top: screenHeight / 4,
      width: screenWidth / 2,
      height: screenHeight / 2
    };
    return function() {
      if (inProgress) {
        return;
      }
      inProgress = true;
      return chrome.windows.create(popup, function(window) {
        var authTabId;
        authTabId = window.tabs[0].id;
        chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
          var callback, response, _i, _len;
          if (tabId === authTabId && changeInfo.url) {
            response = parse(changeInfo.url);
            if (response.access_token) {
              for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
                callback = callbacks[_i];
                callback({
                  token: response.access_token,
                  id: response.user_id
                });
              }
              callbacks = [];
            }
            return chrome.tabs.remove(authTabId);
          }
        });
        return chrome.tabs.onRemoved.addListener(function(tabId, changeInfo, tab) {
          if (tabId === authTabId) {
            return inProgress = false;
          }
        });
      });
    };
  })();

  chrome.runtime.onMessageExternal.addListener(function(request, sender, sendResponse) {
    if (vkRegex.test(sender.url) && request === 'auth') {
      callbacks.push(sendResponse);
      authorize();
      return true;
    }
  });

}).call(this);
